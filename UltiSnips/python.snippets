extends python
priority 1


##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.



global !p

NORMAL  = 0x1
DOXYGEN = 0x2
RST = 0x3

import vim
import re

match_def_re = re.compile(
    r"^\s*(?P<async>async)?\s*(?P<def>def)\s+(?P<name>[\w]+)\s*(?P<args>\(.*\))(?P<returns>\s*->\s*)?(?P<returns_type>.*)?\s*:"
)
match_class_re = re.compile(r"^\s*(?P<class>class)\s+(?P<name>[\w]+)\s*(?P<extends>\(.*\))?\s*:")


def find_nearest_def():
    cp = vim.eval('getpos(".")')
    line_idx = int(cp[1])
    buf = vim.current.buffer

    # Find the nearest def
    lines = reversed(buf[:line_idx])
    for line in lines:
        rem = match_def_re.match(line)

        if rem:
            return rem.groupdict()

    return {}


def find_nearest_class():
    cp = vim.eval('getpos(".")')
    line_idx = int(cp[1])
    buf = vim.current.buffer

    # Find the nearest class
    lines = reversed(buf[:line_idx])
    for line in lines:
        rem = match_class_re.match(line)

        if rem:
            return rem.groupdict()

    return {}


def find_class_name():
    nearest = find_nearest_class()
    return nearest.get('name', '') if nearest else ''


def find_meth_func_name():
    nearest = find_nearest_def()
    return nearest.get('name', '') if nearest else ''


def extract_args(args: str = "", include_self: bool = False):
    res = [arg.strip() for arg in args.strip('()').split(',')]

    if not res or res[0] == '':
         return []

    if not include_self and res[0] == 'self':
         res = res[1:]

    return res


def find_meth_func_args(include_self: bool = False):
    nearest = find_nearest_def()

    if not nearest:
        return ''

    args = extract_args(nearest.get('args', ''), include_self=include_self)
    return ', '.join(args)


def get_args(arglist):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]

    return args


def get_style(snip):
    style = snip.opt("g:ultisnips_python_style", "normal")

    if    style == "doxygen": return DOXYGEN
    elif style == 'rst': return RST
    else: return NORMAL


def format_arg(arg, style, snip):
    if style == DOXYGEN:
        return "@param %s @todo" % arg
    elif style == RST:
        return (":param %s: arg description\n"
                "%s:type %s: type description") % (arg, snip.indent, arg)
    elif style == NORMAL:
        return ":%s: @todo" % arg


def format_return(style, snip):
    if style == DOXYGEN:
        return "@return: @todo"
    elif style == RST:
        return (":return:\n%s:rtype:") % snip
    elif style == NORMAL:
        return ":returns: @todo"


def write_docstring_args(args, snip):
    if not args:
        snip.rv += ' """'
        return

    snip += ""

    style = get_style(snip)

    for arg in args:
        snip += format_arg(arg, style, snip)


def write_init_body(args, snip):
    #parents = [p.strip() for p in parents.split(",")]
    #parents = [p for p in parents if p != 'object']
    class_decl = find_nearest_class()
    cname = class_decl.get('name', '')
    parents = []

    if class_decl.get('extends'):
        parents = extract_args(class_decl['extends'])

    if parents and parents != 'object':
        arglist = ', '.join(args)
        snip += snip.indent + "super().__init__(" + arglist + ")"

    for arg in args:
        snip += snip.indent + "self._%s = %s" % (arg, arg)

endglobal


# Ifs
snippet if "Simple if :" b!
if ${1:condition}:
    $0    
endsnippet

snippet el "Simple else:" b!
else:
    $0
endsnippet

snippet ei "Simple elif:" b!
elif ${1:condition}:
    $0
endsnippet

snippet pr "print()" b!
print('${1}'${2:,${3}})${0}
endsnippet

snippet pra "print() with args"
print("${1}%s" % (${2},${3}))$0
endsnippet

# snippet def "simple def"  !b
# def ${1:function}(`!p
# if snip.indent:
#    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
#     ${5:pass}
# endsnippet

snippet adef
async def ${1:fname}(`!p snip.rv = vim.eval('indent(".") ? "self" : ""')`$2):
	$0
endsnippet

snippet aw "await something"
await ${0}
endsnippet

snippet clm "@classmethod" b
@classmethod
def${0}
endsnippet

snippet _def "my __function__ with docstrings" bs!
def __${1:function}__(`!p
if snip.indent:
   snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
snip.rv <= ""
snip >> 1

args = get_args(t[2])
if args:
   write_docstring_args(args, snip)

style = get_style(snip)
snip += format_return(style, snip.indent)
snip += '"""' `

	${5:pass}
endsnippet

snippet deft "my test function with docstrings" !bs
def test_${1:function}(self):
	${2:pass}
endsnippet

snippet nlogger "Add and configure a named logger" !bs
import logging

# Set up the logger
logger = logging.getLogger(${1:__name__})
# Use a console handler, set it to debug by default
logger_ch = logging.StreamHandler()
logger.setLevel(logging.DEBUG)
#log_formatter = logging.Formatter(('%(levelname)s: %(asctime)s %(processName)s:%(process)d'
#                                   ' %(filename)s:%(lineno)s %(module)s::%(funcName)s()'
#                                   ' -- %(message)s'))
#logger_ch.setFormatter(log_formatter)
logger.addHandler(logger_ch)${0}
endsnippet

snippet logger "Add and configure root logger" !bs
import logging


logging.basicConfig(
	level=logging.DEBUG,
	format=('%(levelname)s: %(asctime)s %(processName)s:%(process)d'
			' %(filename)s:%(lineno)s %(funcName)s'
			' -- %(message)s')
)
logger = logging.getLogger(${1:__name__})
endsnippet


snippet glogger "Get a logger" !bs
import logging
logger = logging.getLogger(${1:__name__})${0}
endsnippet

snippet im "Import shortcut" b
import ${0}
endsnippet

snippet ima "Import as shortcut" b
import ${1} as ${0}
endsnippet

snippet fim "From pkg Import sub" b
from ${1} import ${0}
endsnippet

snippet for "For" !bs
for ${1} in ${2}:
    ${3}
${0}
endsnippet

#snippet if "if" b
#if ${1}:
#    ${0}
#endsnippet

snippet el "else" !bs
else ${1}:
    ${0}
endsnippet

snippet ifel "if else" !bs
if ${1}:
    ${2}
else ${3}:
    ${0}
endsnippet


snippet init "Class __init__" !bs
def __init__(self${1}):`!p
args = get_args(t[1])
write_init_body(args, snip)
`
	${2}
endsnippet

snippet cl "class with docstrings" !bs
class ${1:MyClass}${2:(${3:Parent})}:
    $0
endsnippet

snippet clt "unittest test case class with docstrings" bs
class Test${1:TestClass}(unittest.TestCase):

	def setUp(self):
        ${3:pass}${0}

	def tearDown(self):
        pass
endsnippet

# snippet dbg "logger.debug()" b
# logger.debug("${1}"${2:, }${3})${0}
# endsnippet

snippet dbg "logger.debug()" b
logger.debug("${1} ${2:%s}"${3:, }${4})${0}
endsnippet

snippet dbgc "logger.debug(self.__class__.__name__)" b
logger.debug("%s${1:`!p snip.rv += "." + find_meth_func_name()`} ${2}${3:%s}", self.__class__.__name__, ${4:})${0}
endsnippet

snippet err "logger.error()" b
logger.error("${1} ${2:%s}"${3:, }${4})${0}
endsnippet

snippet errc "logger.error(self.__class__.__name__)" b
logger.error("%s${1:`!p snip.rv += "." + find_meth_func_name()`} ${2}${3:%s}", self.__class__.__name__, ${4:})${0}
endsnippet

snippet wrn "logger.warning()" b
logger.warning("${1} ${2:%s}"${3:, }${4})${0}
endsnippet

snippet wrnc "logger.warning(self.__class__.__name__)" b
logger.warning("%s${1:`!p snip.rv += "." + find_meth_func_name()`} ${2}${3:%s}", self.__class__.__name__, ${4:})${0}
endsnippet

snippet inf "logger.info()" b
logger.info("${1} ${2:%s}"${3:, }${4})${0}
endsnippet

snippet infc "logger.info(self.__class__.__name__)" b
logger.info("%s${1:`!p snip.rv += "." + find_meth_func_name()`} ${2}${3:%s}", self.__class__.__name__, ${4:})${0}
endsnippet

snippet lexc "logger.exception()" b
logger.exception("${1} ${2:%s}"${3:, }${4})${0}
endsnippet

snippet lexcc "logger.exception(self.__class__.__name__)" b
logger.exception("%s${1:`!p snip.rv += "." + find_meth_func_name()`} ${2}${3:%s}", self.__class__.__name__, ${4:})${0}
endsnippet

snippet __repr "__repr__" b
def __repr__(self):
    return (
        f'{super().__repr__()} {self.__class__.__name__}(${0})'
        )
endsnippet

snippet prv "<self.>_varname = <value>" b
`!p
if snip.indent:
    snip.rv = 'self.'`_${1:varname} = ${2:value}${0}
endsnippet

# Django specific
snippet djm "Django model class with docstrings" bs
class ${1:MyModel}(models.Model):

    ${0}
endsnippet

snippet djf "Django model field member" bs
${1:field_name} = models.${2:fieldType}(
    ${3:,}
    help_text=("${4}"),${5}
)${0}
endsnippet

snippet djv "Django view" bs
def ${1:view_name}(req${2:, kwargs}):
    $0
	return render(req, "template_name.html", {})
endsnippet

snippet djcv "Class Based View" bs
class ${1:ViewName}(${2:View}):

    def get(self, req${4}):
        ${0}
        return render(req, "template_name.html", {})
endsnippet


# snippet pa "Print arg 'arg: %s'" i
# ${1:arg}: %s`!p
# names = get_arg_names(t[1])
# snip.rv += names`${0}
# endsnippet

snippet pa "Print arg 'arg: %s'" i
${1:arg}: %s${0}
endsnippet

# Find the class name and method name and
# create a nice super call
snippet supc "super(Class, self)." i!
super(${1}).${2:`!p snip.rv += find_meth_func_name()`}(${3:`!p snip.rv += find_meth_func_args()`})${0}
endsnippet

snippet sup "super()." i!
super().${1:`!p snip.rv += find_meth_func_name()`}(${2:`!p snip.rv += find_meth_func_args()`})${0}
endsnippet

snippet optpar "option parser" b!
from optparse import OptionParser

opt_parser = OptionParser(                                                                          
    usage=("usage: %prog Add your help message here.")
)     

# A basic option that sets an option variable to a string value
opt_parser.add_option("-c", "--config", dest="config_file",                 
        default="",                                           
        help=("The path to the config file for this"        
            " program"))   

# An example of a boolean option
opt_parser.add_option("-d", "--daemonize", dest="daemonize",                
        action="store_true", default=False,                   
        help=("Have the program service daemonize itself" )
)

# 'options' is an object that allows easy referencing of the
# parser options added above.
# Ex: To the the value of the '--config' option refercence: options.config_file
# 'args' is a list of arguments given that aren't part of the option switches
# defined above.
# Ex: If the command '$ command --config=/path/to/config start' is called
# Then args would look like: ['start']
(options, args) = opt_parser.parse_args()
endsnippet


snippet argparse "argument parsing basic code" !b
import argparse

parser = argparse.ArgumentParser(
    "program_name",
    description=("Description of program")
)

parser.add_argument('-t', '--test',
                    default='default_value',
                    help=("Some nice help for this option")
                    )

parser.add_argument('-b',
                    '--boolean-option',
                    default=False, action='store_true',
                    help=("Some nice help for this option")
                    )

# positional argument
parser.add_argument('pos',
                    default=None,
                    nargs="?",
                    help=("Some nice help for this option")
                    )

args = parser.parse_args()
endsnippet

snippet .fm "Python str.format()" !i
.format(${1})${0}
endsnippet

#snippet test
#test `!p snip.rv += get_nearest_def_args()`
#endsnippet

snippet { "Dict" !its
{${1}: ${2}, ${4}}${0}
endsnippet

snippet di "Dict Item 'name': val," !i
'${1:name}': ${2:val}${3:,}${0}
endsnippet

snippet ifmain "My ifmain" !bts
def main():
    $0

if __name__ == '__main__':
    ${1:main()}${2}
endsnippet

snippet #! "#!/usr/bin/env python" !bts
#!/usr/bin/env python
${0}
endsnippet

# `!p import datetime
# if not snip.c:
#     snip.rv = "# " + str(datetime.datetime.now())`

snippet tdir "this_dir" !b
this_dir = os.path.realpath(os.path.dirname(__file__))
endsnippet

snippet get "dict.get()" i
${1:dict}.get(${2}${3:, ${4:default}})${0}
endsnippet

snippet raise "raise Excption()" b
raise ${1:Exception}(${2:"${3:Error}"${4}})${0}
endsnippet

#Fstrings
snippet f' "f'fstring'" i
f'${1}'${0}
endsnippet
snippet f" "f string" i
f"${1}"${0}
endsnippet

# Read only property
snippet rprop
@property
def ${1:foo}(self) -> ${2:type}:
    return self._$1
endsnippet

# vim:ft=snippets:
