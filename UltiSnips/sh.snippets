# https://sharats.me/posts/shell-script-best-practices/

snippet fun "function() "
${1}()
{
    $0
}
endsnippet

snippet if
if [[ $1 ]]; then
    ${0:${VISUAL}}
fi
endsnippet

snippet elif
elif [[ $1 ]]; then
    ${0:${VISUAL}}
endsnippet

snippet go "getopts "
while getopts ":${1:h${2}}" ${3:opts} 
do 
    case $$3 in
    h)
        echo "A help message for this script.";;
    \?)
        echo "Invalid Option: -$OPTARG" >&2;;
    esac
done
endsnippet



snippet fori
for ${1:needle} in ${2:haystack} ; do
    ${3:#statements}
done
endsnippet

snippet tdir "THIS_DIR"
THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
endsnippet

snippet #! "#!/bin/bash" !b
#!/usr/bin/env bash
${0}
endsnippet

snippet preamble "verbose bash boilerplate code" !b
set -o errexit
# So that when a command fails,
# bash exits instead of continuing with the rest of the script.

set -o nounset
# This will make the script fail, when accessing an unset variable.
# Saves from horrible unintended consequences, with typos in variable names.
# When you want to access a variable that may or may not have been set,
# use "${VARNAME-}" instead of "$VARNAME", and youâ€™re good.

set -o pipefail
# This will ensure that a pipeline command is treated as failed,
# even if one command in the pipeline fails.

# This helps in debugging your scripts, a lot.
# People can now enable debug mode,
# by running your script as TRACE=1 ./script.sh instead of ./script.sh
if [[ "${TRACE-0}" == "1" ]]; then
    # Use set -o xtrace, with a check on $TRACE env variable.
    set -o xtrace
fi

main() {
    ${0}
    echo "do awesome stuff"
}

main "$@"
endsnippet

snippet mkscript "bash script boiler" !b
set -o errexit
set -o nounset
set -o pipefail

# This helps in debugging your scripts, a lot.
# People can now enable debug mode,
# by running your script as TRACE=1 ./script.sh instead of ./script.sh endsnippet
if [[ "${TRACE-0}" == "1" ]]; then
    # Use set -o xtrace, with a check on $TRACE env variable.
    set -o xtrace
fi

main() {
    ${0}
    echo "do awesome stuff"
}

main "$@"
endsnippet

snippet shellcheck_source "# shellcheck source=somefile" !b
# shellcheck source=${0:${VISUAL:\/dev\/null}}
endsnippet
