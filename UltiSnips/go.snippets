extends go
priority 1

global !p
def meth_ref(rcvr):
	if not len(rcvr):
		return rcvr

	if len(rcvr) == 1 and rcvr[0] == '*':
		return ""

	if len(rcvr) > 2 and rcvr[0] == '*':
		rcvr = rcvr[1:]

	uppers = [char.lower() for char in rcvr if char.isupper()]
	if len(uppers) > 0:
		if len(uppers) == 1 and rcvr[0].isupper():
			return rcvr.lower()
		else:
			return "".join(uppers)

	return rcvr
endglobal

snippet pkg "package <>" !b
package ${1}
endsnippet

snippet imp "import" !b
import "${1}" ${0}
endsnippet

snippet imps "import" !b
import (
    "${1}"${0}
)
endsnippet

snippet str "string" !i
string${1:()}${0}
endsnippet

snippet type "type kind what" !b
type ${1:kind} ${2:struct} {
    ${3}
}
${0}
endsnippet

snippet fu "func Name()" !b
func ${1:name}(${2}) ${3: error} {
    ${0}
}
endsnippet

snippet met "func (Recvr) FName()" !b
func (${2:`!p snip.rv += meth_ref(t[1])`} ${1:recvr}) ${3:funcName}(${4:params}) ${5: error} {
	${0}
}
endsnippet

snippet funct "func for Test" !b
func ${1:Test${2:FuncName}} (${4:t *testing.T}) {
  ${0}
}
endsnippet

snippet pr "Print" !b
fmt.Print("${1}")${0}
endsnippet

snippet prl "Println" !b
fmt.Println("${1}")${0}
endsnippet

snippet prf "Printf +v\n" !b
fmt.Printf("${1}: ${2:%+v}\n", ${3})${0}
endsnippet

snippet fp "Fprint no formatting" !b
fmt.Fprint(${1:writer}, ${2})${0}
endsnippet

snippet fpf "Fprintf Formatted" !b
fmt.Fprintf(${1:writer}, "${2:%+v}", ${3})${0}
endsnippet

snippet fpe "Fprint to Stderr Formatted" !b
fmt.Fprint(os.Stderr, "${1:%+v}", ${2})${0}
endsnippet

snippet fer "Errorf"
fmt.Errorf("${1}: ${2:%w}", ${2}${3:err})${0}
endsnippet

# For Templates
snippet { "{{stuff}}" i
{{${1}}}${0}
endsnippet

snippet ifer "if err, return err" !b
if err != nil {
		${1:${2:recvr.}logger.Error("${3:msg}", "error", err)}
    return ${4:err}
}
${0}
endsnippet

snippet ifep "if err panic" !b
if err != nil {
		${1:fmt.Fprintf(os.Stderr, "${2:%+v}", err)}
    panic(${3:err})
}
${0}
endsnippet

snippet ee "err :=" !b
err := ${1}
endsnippet

snippet ve "err :=" !b
${1:var}, err := ${2}
endsnippet

snippet dbg "logger.Debug()" !b
${1:inst.}logger.Debug("${2:msg}"${3:,})
${0}
endsnippet

snippet err "logger.Error()" !b
${1:inst.}logger.Error("${2:msg}"${3:,})
${0}
endsnippet

snippet wrn "logger.Warn()" !b
${1:inst.}logger.Warn("${2:msg}"${3:,})
${0}
endsnippet

snippet inf "logger.Info()" !b
${1:inst.}logger.Info("${2:msg}"${3:,})
${0}
endsnippet

snippet dbgc "logger.DebugContext()" !b
${1:inst.}logger.DebugContext(${2:ctx}, "${3:msg}"${4:,})
${0}
endsnippet

snippet errc "logger.ErrorContext()" !b
${1:inst.}logger.ErrorContext(${2:ctx}, "${3:msg}"${$:,})
${0}
endsnippet

snippet wrnc "logger.WarnContext()" !b
${1:inst.}logger.WarnContext(${2:ctx}, "${3:msg}"${4:,})
${0}
endsnippet

snippet infc "logger.InfoContext()" !b
${1:inst.}logger.InfoContext(${2:ctx}, "${3:msg}"${4:,})
${0}
endsnippet

snippet wgrp "logger.WithGroup()" !b
${1:inst.}logger.WithGroup(${2:"GroupName"})
${0}
endsnippet

snippet fsel "for select" !b
for ${1}{
	select {
		case ${2}:
		${3:default:}${0}
	}
}
endsnippet
