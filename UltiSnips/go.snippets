priority 1

snippet pkg "package <>" !b
package ${1}
endsnippet

snippet imp "import" !b
import "${1}" ${0}
endsnippet

snippet imps "import" !b
import (
    "${1}"${0}
)
endsnippet

snippet str "string" !i
string${1:()}${0}
endsnippet

snippet type "type kind what" !b
type ${1:kind} ${2:struct} {
    ${3}
}
${0}
endsnippet

snippet func "func" !b
func${1: (${2:recvr})} ${3:name}(${4})${5: error} {
    ${0}
}
endsnippet

snippet funct "func for Test" !b
func ${1:Test${2:FuncName}} (${4:t *testing.T}) {
    ${0}
}
endsnippet

snippet pr "Print" !b
fmt.Print("${1}")${0}
endsnippet

snippet prl "Println" !b
fmt.Println("${1}")${0}
endsnippet

snippet prf "Printf +v\n" !b
fmt.Printf("${1}: ${2:%+v}\n", ${3})${0}
endsnippet

snippet fp "Fprint no formatting" !b
fmt.Fprint(${1:writer}, ${2})${0}
endsnippet

snippet fpf "Fprintf Formatted" !b
fmt.Fprintf(${1:writer}, "${2:%+v}", ${3})${0}
endsnippet

snippet fpe "Fprint to Stderr Formatted" !b
fmt.Fprint(os.Stderr, , "${1:%+v}", ${2})${0}
endsnippet

# For Templates
snippet { "{{stuff}}" i
{{${1}}}${0}
endsnippet

snippet ifer "if err, return err" !b
if err != nil {
		${1:fmt.Fprintf(os.Stderr, "${2:%+v}", err)}
    return ${3:err}
}
${0}
endsnippet

snippet ifep "if err panic" !b
if err != nil {
		${1:fmt.Fprintf(os.Stderr, "${2:%+v}", err)}
    panic(${3:err})
}
${0}
endsnippet

snippet ee "err :=" !b
err := ${1}
endsnippet

snippet ve "err :=" !b
${1:var}, err := ${2}
endsnippet
