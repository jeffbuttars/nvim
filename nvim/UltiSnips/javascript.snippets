priority 1

snippet fns "Function namespace"
var ${1:new_namespace} = (function $1 (){

    // Private vars
    ${2: var ${3:name} = 'private'}
    

    // Private functions
    ${4: ${5:var pfunc = function pfunc() {
        return ''
    }} }

    // Return the public interface
    return {
        $6:$0
    }
})()
endsnippet

snippet ons "object namespace"
if (! window.${1:nsname} ) {
    var $1 = {}
    window.$1 = $1
}$0
endsnippet

snippet af "Anonymous Function" i
function (${1:args}) {${2}}${3}
endsnippet

snippet (af "Anonymous Function"
(function (${1:args}) {${2}
})${3}
endsnippet

snippet (af) "Anonymous Function"
var ${1} = (function (${2:args}) {
${3}
})()
endsnippet

snippet naf "Named Anonymous Function"
function ${1:funcname}(${2:args}) {${3}}$0
endsnippet

snippet nf "Named inline function"
var ${1:fname} function (${2:args}) {${3}}$0
endsnippet

snippet vf "Var function"
var ${1:func_name} = function (${2:args}) {
    ${3:console.log('$1()')}
}
endsnippet

snippet vnf "Var named function"
var ${1:func_name} = function $1(${2:args}) {
    ${3:console.log( ${4: '$1()'} )}$5
}
endsnippet

snippet v "simple var = someting expression"
var ${1} = ${2}
endsnippet

snippet c "simple const = SOMETING"
const ${1} = ${2}
endsnippet

snippet clg "console.log()"
console.log($1)$0
endsnippet

snippet cl "class"
class ${1} {
	${2}
}${0}
endsnippet

snippet vcl "var className = class"
var ${1} = class ${2:$1} {
	${3}
}${0}
endsnippet

snippet req "require('')"
require('${1}')$0
endsnippet

snippet vreq "var name = require('')"
var ${1} = require('${2:$1}')$0
endsnippet

snippet fori "for key in"
for (var ${1:key} in ${2:obj}) { if ($2.hasOwnProperty(key)) {
    ${3:$2[key]}$0
}}
endsnippet

snippet forl "for (let x of )"
for (let ${1} of ${2}) {
	${0}
}
endsnippet

snippet for "for (...) {...} (faster)" !
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--){
	${3:$1[$2]}$0
}
endsnippet

snippet for "for (...) {...}" !
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}$0
}
endsnippet

snippet if "if" !b
if (${1}) {
    ${2}
} ${0}
endsnippet

snippet else "else" !b
else (${1}) {
    ${2}
} ${0}
endsnippet

snippet imf "import { something } from [module]" b
import { ${1:something}${2:, nexthing } } from '${3:mod}'${0}
endsnippet

snippet im "import [something] from [module]" b
import ${1:something} from '${2:mod}'${0}
endsnippet

snippet . "...spread" i
...${1}${0}
endsnippet

snippet > "(${1:params}) => ${2}" i
(${1:params}) => ${2:{${3}}}${0}
endsnippet

snippet _each "lodash each" b
_.forEach(${1:collection}, function (${2:obj}) {
  ${3:$2}${0}
})
endsnippet

snippet rcomp "React Component Class" b
var ${1} = React.CreateClass({
  propTypes: {
  }

  render: function() {
    return (${0})
  }
})
endsnippet
